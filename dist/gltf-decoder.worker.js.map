{"version":3,"file":"gltf-decoder.worker.js","sources":["../src/loading2/gltf-decoder.worker.js"],"sourcesContent":["import { PointAttribute, PointAttributeTypes } from './point-attributes';\n\nconst typedArrayMapping = {\n  int8: Int8Array,\n  int16: Int16Array,\n  int32: Int32Array,\n  int64: Float64Array,\n  uint8: Uint8Array,\n  uint16: Uint16Array,\n  uint32: Uint32Array,\n  uint64: Float64Array,\n  float: Float32Array,\n  double: Float64Array,\n};\n\nonmessage = function(event) {\n  let { buffer, pointAttributes, scale, name, min, max, size, offset, numPoints } = event.data;\n\n  let view = new DataView(buffer);\n\n  let attributeBuffers = {};\n\n  let bytesPerPointPosition = 4 * 3;\n\n  let gridSize = 32;\n  let grid = new Uint32Array(gridSize ** 3);\n  let toIndex = (x, y, z) => {\n    // min is already subtracted\n    let dx = (gridSize * x) / size.x;\n    let dy = (gridSize * y) / size.y;\n    let dz = (gridSize * z) / size.z;\n\n    let ix = Math.min(parseInt(dx), gridSize - 1);\n    let iy = Math.min(parseInt(dy), gridSize - 1);\n    let iz = Math.min(parseInt(dz), gridSize - 1);\n\n    let index = ix + iy * gridSize + iz * gridSize * gridSize;\n\n    return index;\n  };\n\n  let numOccupiedCells = 0;\n\n  let tightBoxMin = [Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY];\n  let tightBoxMax = [Number.NEGATIVE_INFINITY, Number.NEGATIVE_INFINITY, Number.NEGATIVE_INFINITY];\n\n  for (let pointAttribute of pointAttributes.attributes) {\n    if (['POSITION_CARTESIAN', 'position'].includes(pointAttribute.name)) {\n      let buff = new ArrayBuffer(numPoints * 4 * 3);\n      let positions = new Float32Array(buff);\n      for (let j = 0; j < numPoints; j++) {\n        let pointOffset = j * bytesPerPointPosition;\n\n        let x = view.getFloat32(pointOffset + 0, true) + offset[0] - min.x;\n        let y = view.getFloat32(pointOffset + 4, true) + offset[1] - min.y;\n        let z = view.getFloat32(pointOffset + 8, true) + offset[2] - min.z;\n\n        tightBoxMin[0] = Math.min(tightBoxMin[0], x);\n        tightBoxMin[1] = Math.min(tightBoxMin[1], y);\n        tightBoxMin[2] = Math.min(tightBoxMin[2], z);\n\n        tightBoxMax[0] = Math.max(tightBoxMax[0], x);\n        tightBoxMax[1] = Math.max(tightBoxMax[1], y);\n        tightBoxMax[2] = Math.max(tightBoxMax[2], z);\n\n        let index = toIndex(x, y, z);\n        let count = grid[index]++;\n        if (count === 0) {\n          numOccupiedCells++;\n        }\n\n        positions[3 * j + 0] = x;\n        positions[3 * j + 1] = y;\n        positions[3 * j + 2] = z;\n      }\n\n      attributeBuffers[pointAttribute.name] = { buffer: buff, attribute: pointAttribute };\n    } else if (['RGBA', 'rgba'].includes(pointAttribute.name)) {\n      attributeBuffers[pointAttribute.name] = {\n        buffer: buffer.slice(numPoints * bytesPerPointPosition),\n        attribute: pointAttribute,\n      };\n    }\n  }\n\n  let occupancy = parseInt(numPoints / numOccupiedCells);\n\n  {\n    // add indices\n    let buff = new ArrayBuffer(numPoints * 4);\n    let indices = new Uint32Array(buff);\n\n    for (let i = 0; i < numPoints; i++) {\n      indices[i] = i;\n    }\n    attributeBuffers['INDICES'] = { buffer: buff, attribute: PointAttribute.INDICES };\n  }\n\n  {\n    // handle attribute vectors\n    let vectors = pointAttributes.vectors;\n\n    for (let vector of vectors) {\n      let { name, attributes } = vector;\n      let numVectorElements = attributes.length;\n      let buffer = new ArrayBuffer(numVectorElements * numPoints * 4);\n      let f32 = new Float32Array(buffer);\n\n      let iElement = 0;\n      for (let sourceName of attributes) {\n        let sourceBuffer = attributeBuffers[sourceName];\n        let { offset, scale } = sourceBuffer;\n        let view = new DataView(sourceBuffer.buffer);\n\n        const getter = view.getFloat32.bind(view);\n\n        for (let j = 0; j < numPoints; j++) {\n          let value = getter(j * 4, true);\n\n          f32[j * numVectorElements + iElement] = value / scale + offset;\n        }\n\n        iElement++;\n      }\n\n      let vecAttribute = new PointAttribute(name, PointAttributeTypes.DATA_TYPE_FLOAT, 3);\n\n      attributeBuffers[name] = {\n        buffer: buffer,\n        attribute: vecAttribute,\n      };\n    }\n  }\n\n  let message = {\n    buffer: buffer,\n    attributeBuffers: attributeBuffers,\n    density: occupancy,\n    tightBoundingBox: { min: tightBoxMin, max: tightBoxMax },\n  };\n\n  let transferables = [];\n  for (let property in message.attributeBuffers) {\n    transferables.push(message.attributeBuffers[property].buffer);\n  }\n  transferables.push(buffer);\n\n  postMessage(message, transferables);\n};\n"],"names":[],"mappings":"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"}